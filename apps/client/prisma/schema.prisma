generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = "file:./dev.db"
  url      = env("DATABASE_URL")
}

model user {
  id              String         @id @default(uuid())
  walletAddress   String         @unique
  email           String
  isEmailVerified Boolean        @default(false)
  phone           String?
  isPhoneVerified Boolean        @default(false)
  bvn             String?
  isBvnVerified   Boolean        @default(false)
  nin             String?
  isNinVerified   Boolean        @default(false)
  dob             String?
  address1        String?
  address2        String?
  pin             String?
  created_at      DateTime?      @default(now())
  updated_at      DateTime?      @updatedAt
  bankAccounts    bank_account[]
  transactions    transactions[]
  p2pAds          p2p_ads[]
  direct_orders   direct_order[]
}

model bank_account {
  id          String    @id @default(uuid())
  bankName    String
  accountName String
  accountNo   String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  user_id     String?
  user        user?     @relation(fields: [user_id], references: [id])
}

model p2p_ads {
  id         String    @id @default(uuid())
  user_id    String?
  user       user?     @relation(fields: [user_id], references: [id])
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

model direct_order {
  id         String           @id @default(uuid())
  created_at DateTime?        @default(now())
  updated_at DateTime?        @updatedAt
  amount     Int
  user_id    String?
  user       user?            @relation(fields: [user_id], references: [id])
  status     QuickOrderStatus
}

enum QuickOrderStatus {
  PENDING
  COMPLETED
  FAILED
}

model transactions {
  id              String              @id @default(uuid())
  created_at      DateTime?           @default(now())
  updated_at      DateTime?           @updatedAt
  user_id         String?
  transactionHash String
  description     String
  user            user?               @relation(fields: [user_id], references: [id])
  category        TransactionCategory
  status          TransactionStatus
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CLOSED
}

enum TransactionCategory {
  P2P
  QUICK_SWAP
  AIRTIME
  WITHDRAW
  SEND
  RECEIVE
}

model rates {
  id         String     @id @default(uuid())
  created_at DateTime?  @default(now())
  updated_at DateTime?  @updatedAt
  currency   String
  symbol     String?
  amount     Int
  status     RateStatus
}

enum RateStatus {
  BUY
  SELL
}

model invoice {
  id                  String            @id @default(uuid())
  created_at          DateTime?         @default(now())
  updated_at          DateTime?         @updatedAt
  currency            String
  symbol              String?
  totalAmount         String
  ownerWalletAddress  String
  footerNote          String
  thanksMsg           String
  toBusinessName      String
  toEmail             String
  fromBusinessName    String
  fromPhone           String
  fromEmail           String
  fromDate            String
  fromAddress         String
  toWebsite           String?
  toAddress           String?
  toPhone             String?
  user_id             String?
  total               Float
  subtotal            Float
  tax                 Float?
  discount            Float?
  status              InvoiceStatus
  items               invoice_item[]
  invoice_template_id String?
  invoice_template    invoice_template? @relation(fields: [invoice_template_id], references: [id])
}

enum InvoiceStatus {
  SENT
  APPROVED
  PENDING
}

model invoice_item {
  id          String    @id @default(uuid())
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  title       String
  description String?
  amount      String
  quantity    String
  invoice_id  String?
  invoice     invoice?  @relation(fields: [invoice_id], references: [id])
}

model invoice_template {
  id          String    @id @default(uuid())
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  sampleImage String
  invoice     invoice[]
}
